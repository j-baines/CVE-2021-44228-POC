import json
import time
import sys
import subprocess   # noqa: S404
import threading


# Functions for starting/managing processes and reading their stdout

# called in thread in start_server
def _read_server_output(pipe, queue, proc_type):
    try:
        for line in pipe:
            queue.put((proc_type, line.strip()))

    except Exception as e:
        queue.put((proc_type, f'ERROR: {e}'))


def _parse_msg(proc_type, msg):
    try:
        return json.loads(msg)
    except Exception:
        sys.stderr.write(f'Unparsed {proc_type} output: {msg}\n')

    return None


def check_for_msg_type(queue, proc_type, msg_type, timeout):
    start_time = time.time()
    remaining_time = timeout

    while remaining_time > 0:
        try:
            line = queue.get(timeout=remaining_time)
            p_type, msg = line
            if p_type == proc_type:
                msg_dict = _parse_msg(proc_type, msg)
                if msg_dict and msg_dict.get('type') == msg_type:
                    return msg_dict
            else:
                sys.stderr.write(f'Ignoring msg from {p_type} server: {line}\n')
        except Exception:
            pass

        remaining_time = timeout - (time.time() - start_time)


def gather_msgs(queue, proc_type, msg_type, timeout):
    ret = []
    while len(ret) < 1000:  # check to bail out in case we're flooded for some reason
        msg_dict = check_for_msg_type(queue, proc_type, msg_type, timeout)
        if msg_dict:
            ret.append(msg_dict)
        else:
            break

    return ret


def kill_proc(proc, server_type):
    try:
        proc.terminate()
        print(f'Shut down {server_type} proc')
    except Exception:
        pass


def start_server(args, queue, proc_type):
    proc = subprocess.Popen(args, shell=False, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, bufsize=1, universal_newlines=True)
    thread = threading.Thread(target=_read_server_output, args=(proc.stdout, queue, proc_type), daemon=True)
    thread.start()

    try:
        started_msg = check_for_msg_type(queue, proc_type, 'started', 30)
        if started_msg:
            print(f'{proc_type} server started')
            return proc

    except Exception as e:
        sys.stderr.write(f'Unexpected error {e}\n')

    kill_proc(proc, proc_type)
    return None
