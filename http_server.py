#!/user/bin/python3

import json
import http.server
import os
import os.path
import socketserver
import sys

from argparse import ArgumentParser
from functools import partial
from time import time
from urllib.parse import urlparse, parse_qs


class Handler(http.server.SimpleHTTPRequestHandler):
    # override parent values
    server_version = 'hello'
    sys_version = '1.0'

    def __init__(self, *args, serve_dir=None, token=None, **kwargs):
        self._serve_dir = serve_dir
        self._token = token
        super().__init__(*args, directory=serve_dir, **kwargs)

    def _validate_token(self, path, query_string):
        # Validation can pass in two ways
        # - path starts with the prefix "<token>-"
        # - query string contains a -t (token) param whose value matches <token>

        if path.startswith(f"/{self._token}-"):
            return True

        query_components = parse_qs(query_string)
        t = query_components.get('t', [])
        if t and len(t) == 1:
            return t[0] == self._token

        return False

    def _log_event(self, _type):
        print(json.dumps({
            'path': self.path,
            'headers': {k: self.headers.get(k) for k in self.headers.keys()},
            'requestline': self.requestline,
            'time': time() * 1000,
            'client_address': self.client_address,
            'type': _type,
            'token': self._token
        }), flush=True)

    def _valid_file_paths(self):
        if self._serve_dir:
            return [f for f in os.listdir(self._serve_dir) if os.path.isfile(os.path.join(self._serve_dir, f))]
        else:
            return []

    def do_GET(self):
        parsed = urlparse(self.path)

        if not self._validate_token(parsed.path, parsed.query):
            sys.stderr.write('Invalid or missing token\n')
            self.send_response(200)
            self.end_headers()
            return

        if parsed.path == '/ping' or parsed.path.startswith('/ping/'):
            self._log_event('ping')
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'pong')
            return

        if parsed.path.lstrip('/') in self._valid_file_paths():
            self._log_event('file')
            super().do_GET()
        else:
            sys.stderr.write(f'No file for path {parsed.path}\n')
            self.send_response(404)
            self.end_headers()

    def do_HEAD(self):
        parsed = urlparse(self.path)

        if not self._validate_token(parsed.path, parsed.query):
            sys.stderr.write('Invalid or missing token\n')
            self.send_response(200)
            self.end_headers()
            return

        if parsed.path.lstrip('/') in self._valid_file_paths():
            super().do_HEAD()
        else:
            sys.stderr.write(f'No file for path {parsed.path}\n')
            self.send_response(404)
            self.end_headers()


def _parse_args():
    parser = ArgumentParser()
    parser.add_argument('-t', '--token', required=True, help='unique request token to authorize clients')
    parser.add_argument('-i', '--ip', required=False, help='local IP for LDAP server to bind to', default='0.0.0.0')    # noqa: S104
    parser.add_argument('-p', '--port', required=False, help='local port that LDAP server listens on', default=8000, type=int)
    parser.add_argument('-d', '--directory', required=False, help='directory to serve contents from')

    return parser.parse_args()


def _log_started(ip, port, token):
    event = {'ip': ip, 'port': port, 'time': time() * 1000, 'type': 'started', 'token': token}
    print(json.dumps(event), flush=True)


def main():
    args = _parse_args()
    token = args.token
    ip = args.ip
    port = args.port
    serve_dir = args.directory

    if serve_dir:
        if not os.path.isdir(serve_dir):
            sys.stderr.write(f'Not a valid directory to serve from: {serve_dir}\n')
            sys.exit(1)

    handler = partial(Handler, serve_dir=serve_dir, token=token)
    httpd = socketserver.TCPServer((ip, port), handler)

    _log_started(ip, port, token)

    httpd.serve_forever()


if __name__ == '__main__':
    main()
